The below information is also posted here: https://wiki.appcelerator.org/display/qe/QE+Automation+App

- For Alloy tests: ﻿Create a controller and view for your test. (Style is optional)
- For Classic tests: Create a controller for your test. (use it as your app.js)

- Add the below block to the end of each test's controller:
/*************************** Automation ***************************/
var _window = ADDWINDOWHERE;
var _actions = [
];

/***** Set the above. Do not modify the below *****/
var _af = require("automateFunctions");
_af._setup(_actions, _window, arguments[0] || {});
/************************* End Automation *************************/

- Set the _window variable in the test's automation block so that the Automator can properly close the test.
	- ﻿Set it to the main window in your view, if running an Alloy test
	- Set it to the main window in your controller, if running a Classic test

- Add the testing actions to the '_actions' array:
This is an array of actions that you want your test to execute.
Actions array entry syntax: (Properties in [ ] are optional and <time> can be in seconds or milliseconds; Any integer over 240 will be counted as milliseconds)
(Below is the syntax for QE Automator 2.0. If you need the syntax for v1.0, see: https://wiki.appcelerator.org/display/qe/QE+Automation+App+V1+-+Old)		
	Call a function:
		{call: <function>, [args: <parameters>, time: <int>] }	//'args' can be a single value or an array of values
		EX:
		{call: setup}											//Calls the specified function with no parameters
		{call: test, args: [30, "Hello"]}						//Calls the specified function with the listed parameters
		{call: init, time: 10}									//Calls the specified function with no parameters and the listed timeout
		{call: doStuff, args: false, time: 2000}				//Calls the specified function with the listed parameters and listed timeout
	Fire an event:
		{event: <"event">, object: <object>, [args: <parameters>, time: <time>] }	//'args' must be an object, as if passed into 'fireEvent'
		EX:
		{event: "click", object: button}						//Fires event on object
		{event: "close", object: window, time: 1000}			//Fires event on object. <time> is how long to wait before executing the next action
		{event: "click", object: label, args: {text: "Yay"} }	//Fires event on object with specified parameters
		{event: "click", object: button, args: {change: false}, time: 2}	//Fires event on object with specified parameters. <time> is how long to wait before executing the next action
	Call a method:
		{method: <"method">, object: <object>, [args: <parameters>, time: <time>] }
		EX:
		{method: "hide", object: docViewer}						//Calls the object's method
		{method: "show", object: message, time: 1000}			//Calls the object's method. <time> is how long to wait before executing the next action
		{method: "setVisible", object: label, args: true}		//Calls the object's method with specified parameters
		{method: "setOpacity", object: window, args: 0.5, time: 2}	//Fires event on object with specified parameters. <time> is how long to wait before executing the next action
	Take a screenshot:
		{screenshot: <true/object>, [compare: <boolean>]}		//'compare' indicates if this screenshot should be compared with the DB's image for the same action. Default is 'true'. See the "How to compare images" section below.
		Add 'screenshot: <true/object>' property to an action
		EX:
		{screenshot: true}										//Captures the current screen or object. Uses takeScreenshot().
		{screenshot: button1}									//Captures the current screen or object. Uses object.toImage().
		{call: foo, screenshot: true}							//Performs a screenshot action immediately after the current action. In the example, a screenshot would be taken after the 'foo' function returns
		{screenshot: true, compare:false}						//Captures the current screen or object. Uses takeScreenshot(). Does not do image comparison.
	Wait for a time:
		{wait: <time/true>, [until:<"event">, object: <object>, time: <time>]}												
		Add 'wait: <time>' property to an action	
		EX:
		{wait: 3}												//Wait for the specified time
		{wait: 1500}											//Wait for the specified time
		{wait: true, until: "sessioncompleted", object: Ti.App.iOS, time: 60}	//Wait until the specified event is fired on the specified object. Will timout at the specified time. Make sure to set a time or the wait will never complete if the event is not fired
		{call: bar, wait: 2}									//Wait for the specified time immediately after the current action. In the example, the test would wait after the 'bar' function returns
	Relaunch the current test:
		{relaunch: <int>}										//Relaunches the test. <int> is the number of test runs that this action will be executed. In the example, the relaunch action will execute twice, but will be skipped on the third run of the test (after the second relaunch)
	Restart the app:
		{restart: <int>}										//Restarts the app and relaunches the current test. <int> is the number of test runs that this action will be executed. In the example, the restart action will execute twice, but will be skipped on the third run of the test (after the second restart)
	Skip actions on re-runs:
		Add 'runs: <int>' property to an action	
		EX:
		{call: fooBar, runs: 2}									//Only execute this action on <int> number of runs. In the example, the action will execute twice, but will be skipped on the third run of the test (after the second relaunch)
	Background the app*:
		{background: <boolean>, [time: <time>] }					
		EX:
		{background: true}										//Backgrounds the app. Execution of the test pauses if 'background' is true. *Requires the 'QEA Helper' app installed on the device
		{background: false, time: 20}							//Backgrounds the app for the specified amount of time. Execution of the test pauses if 'background' is true. *Requires the 'QEA Helper' app installed on the device
	Log output:
		{log: <message>}										//Saves the message to a log variable and prints it to console
	Verify output*:
		{checkLog: <message>}									//Check if the message was saved to the log variable during the test. *Will only check messages output with the '_log' function during the test or with {log: <message>}
		
EXAMPLE:
	var _actions = [
		{call: check, args: [true, "Ok"], wait: 2}
		{event: "click", object: button, screenshot: true, runs: 1},
		{relaunch: 1},
		{call: success, time: 4}
	];
	
- How to compare images:
	- Add a screenshot action to a test (with compare:true or with no compare property specified)
	- Run the test
	- View the test's images from the main menu. Find the image you want to compare
	- Click the 'Options' button and select "Upload Image for Comparisons". You should get an alert saying "Image Uploaded"
	- Run the test again. Now, the screenshot will be compared to the uploaded image
	
	
- You can also call functions inside of the test itself to help with basic test needs or to verify output:
	_log(message);									//Save the message as a log to be validated later
	_checkLog(message);								//Checks the saved logs for the message and returns true if it was found, false if not found
	alert(message);									//Call an alert. The alert will be dismissed automatically if not running the test manually


- Add an object to the 'tests' array in 'index.js'. The object should have this format:
		{name:"TIMOBXXXX", section: <section>, <exclude/only>: <platforms>}
	- name: Property for the name of the controller for the test
	- section: Property indicating what section in the list the test will be added to. Visual/Organizational purposes only. (OPTIONAL)
	- exclude/only: Property indicating what platforms/OSs the test is excluded from or will only run on. (OPTIONAL)
	- platforms: A list of platforms/OSs. (OPTIONAL)
		- If excluding, this is a string array of platforms that the test will not run on.
		- If specifying 'only', this is the one platform/OS that the test will run on. Be sure that your test will ONLY run on this platform/OS (including new platforms/OS's added in the future)
		- Not setting 'exclude' or 'only' indicates that the test can run on all platforms/OS's
- Only use lower case strings for the 'exclude' and 'only' properties

EXAMPLE:
	var tests = [
		{name:"TIMOB0123", section:"Alloy", exclude:"mobileweb"},
		{name:"TIMOB1234", exclude:["android", "ios"]},
		{name:"TIMOB5678", only: "ios"},
		{name:"TIMOB9012"},
	];
	
- Add the test's info to the info array in 'app/lib/infoStrings.js': (This is not required for tests, but is highly recommended to do)
	1. It is best to add the information from the ticket (description, steps to reproduce, expected results, etc)
	2. The info does not need to be placed in the array in any particular order
	3. There is a template to use for the info entry at the top of the file
	
- To get a test to be labeled as "Passed", "Failed", "Check", or "Skip":
	1. "Passed": Have a function called in the actions array for the test return the boolean 'true'
	2. "Failed": Have a function called in the actions array for the test return the boolean 'false'
	3. "Check": Have no explicit returns from any functions in the actions array
	4. "Skip": Have a function called in the actions array for the test return the string 'skip'

EXAMPLE:
The below test will pass for iPhone 6 and 6 Plus that have the correct size, fail if the size is incorrect, and be skipped if the device is not an iPhone 6 or 6 Plus.

	function check() {
		var model = Ti.Platform.getModel();
		if ((model == "iPhone7,1" && size == 736) || (model == "iPhone7,2" && size == 667))	
			return true;
		else if (model == "iPhone7,1" || model == "iPhone7,2")
			return false;
		else
			return "skip";
	}


- Known issues:
	- Cannot see button pushes (UI does not show the click on the button)
	- Restarting wipes out previous tests' results
	- Can only dismiss one alert at a time

